<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="${module.name}" default="build"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="antlib:org.apache.ivy.ant ">
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CONFIGURATION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <property file="build-configuration.properties"/>
    <path id="headers">
        <fileset dir="${source.main.dir}">
            <include name="**/*.h"/>
        </fileset>
    </path>
    <path id="classes">
        <fileset dir="${source.main.dir}">
            <include name="**/*.m"/>
            <exclude name="**/main.m"/>
        </fileset>
    </path>
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PUBLIC TARGETS (can depend on other targets) ~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <target name="build" depends="
    --make.dirs,
    --clean,
    --make.dirs,
    --stamp.build.failing,
    --test.build.run,
    --test.generate.report,
    --test.evaluate,
    --assemble.coverage.data,
    --api.report,
    --framework.build,
    --stamp.build.passing"/>

    <target name="clean" depends="--clean"/>

    <target name="jenkins" depends="
    build,
    --publish.site"/>

    <target name="fast">
        <property name="fast" value="yes"/>
    </target>

    <target name="no-fail-tests">
        <property name="no-fail-tests" value="yes"/>
    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ END PUBLIC TARGETS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PRIVATE TARGETS (MUST NOT depend on other targets!) ~~~~~~~~~~~~~~~~~~~ -->
    <target name="--stamp.build.failing">
        <mkdir dir="${reports.dir}/build-status"/>
        <copy tofile="${reports.dir}/build-status/build-status.png" file="${basedir}/Scripts/build-failed.png"/>
    </target>

    <target name="--stamp.build.passing" unless="tests.failed">
        <copy tofile="${reports.dir}/build-status/build-status.png" file="${basedir}/Scripts/build-passed.png" overwrite="true"/>
    </target>


    <target name="--make.dirs">
        <mkdir dir="${target.dir}"/>
        <mkdir dir="${temp.dir}"/>
        <mkdir dir="${temp.dir}/coverage-data"/>
        <mkdir dir="${reports.dir}"/>
        <mkdir dir="${reports.dir}/tests"/>
    </target>

    <target name="--clean" unless="fast">
        <delete dir="${target.dir}" quiet="yes"/>
        <delete failonerror="no" quiet="yes">
            <fileset dir="/tmp" includes="**/*.pbxproj,**/*.m,**/*.h"/>
        </delete>
    </target>

    <target name="--test.build.run">
        <mkdir dir="${reports.dir}/tests"/>

        <echo file="${temp.dir}/runTests.sh">
            #!/bin/sh
            xcodebuild -workspace ${module.name}.xcworkspace test -scheme Tests -configuration Debug > ${reports.dir}/tests/test-results.txt
            xcpretty ${reports.dir}/tests/test-results.txt > ${reports.dir}/tests/test-results-pretty.txt
        </echo>
        <chmod perm="+x" file="${temp.dir}/runTests.sh"/>
        <exec executable="${temp.dir}/runTests.sh" failonerror="false" failifexecutionfails="false"/>

        <loadfile property="pretty-test-output" srcFile="${reports.dir}/tests/test-results-pretty.txt"/>
        <echo>${pretty-test-output}</echo>

        <echo message="Convert test output"/>
        <echo file="${temp.dir}/convert-test-output.sh">
            #!/bin/bash
            set -e # fail script if any commands fail

            cd ${temp.dir}
            ${scripts.dir}/ocunit2junit ${reports.dir}/tests/test-results.txt > ${temp.dir}/junit-parser.txt
        </echo>
        <chmod perm="+x" file="${temp.dir}/convert-test-output.sh"/>
        <exec executable="${temp.dir}/convert-test-output.sh" failonerror="true" failifexecutionfails="true"/>

    </target>

    <target name="--test.generate.report">
        <echo>${pretty-test-output}</echo>

        <loadfile srcfile="${reports.dir}/tests/test-results.txt" property="tests.error">
            <filterchain>
                <filterreader classname="org.apache.tools.ant.filters.LineContains">
                    <param type="contains" value="BUILD FAILED"/>
                </filterreader>
            </filterchain>
        </loadfile>
        <fail if="tests.error" message="Tests failed to build."/>

        <loadfile srcfile="${reports.dir}/tests/test-results.txt" property="tests.failed">
            <filterchain>
                <filterreader classname="org.apache.tools.ant.filters.LineContains">
                    <param type="contains" value="' failed ("/>
                </filterreader>
            </filterchain>
        </loadfile>

        <echo message="Convert test output"/>
        <echo file="${temp.dir}/convert-test-output.sh">
            #!/bin/bash
            set -e # fail script if any commands fail

            cd ${temp.dir}
            ${scripts.dir}/ocunit2junit ${reports.dir}/tests/test-results.txt > ${temp.dir}/junit-parser.txt
        </echo>
        <chmod perm="+x" file="${temp.dir}/convert-test-output.sh"/>
        <exec executable="${temp.dir}/convert-test-output.sh" failonerror="true" failifexecutionfails="true"/>

        <junitreport todir="${temp.dir}">
            <fileset dir="${temp.dir}/test-reports" includes="*xml"/>
            <report format="frames" styledir="${scripts.dir}" todir="${reports.dir}/test-results">
                <param name="TITLE" expression="Test Results"/>
            </report>
        </junitreport>
        <copy todir="${reports.dir}/test-results">
            <fileset dir="${scripts.dir}" includes="**/*.png"/>
        </copy>
    </target>

    <target name="--test.evaluate" unless="no-fail-tests">
        <fail if="tests.failed" message="Tests failed. Report is at ${reports.dir}/test-results"/>
    </target>

    <target name="--framework.build">
        <exec executable="xcodebuild" failonerror="true" outputproperty="framework.build.out" errorproperty="framework.build.error">
            <arg line="-target ${application.target.name}"/>
        </exec>
    </target>


    <target name="--assemble.coverage.data">

        <mkdir dir="${temp.dir}/coverage-data"/>
        <pathconvert pathsep=", " property="gcno.list" refid="classes">
            <mapper>
                <chainedmapper>
                    <flattenmapper/>
                    <globmapper from="*.m" to="**/*.gcno"/>
                </chainedmapper>
            </mapper>
        </pathconvert>

        <copy todir="${temp.dir}/coverage-data" flatten="true">
            <fileset dir="${user.home}/Library/Developer/Xcode/DerivedData" includes="${gcno.list}"/>
        </copy>
        <pathconvert pathsep=", " property="gcda.list" refid="classes">
            <mapper>
                <chainedmapper>
                    <flattenmapper/>
                    <globmapper from="*.m" to="**/*.gcda"/>
                </chainedmapper>
            </mapper>
        </pathconvert>

        <echo message="Coverage info files: ${gcno.list}"/>
        <echo message="Coverage data files: ${gcda.list}"/>

        <copy todir="${temp.dir}/coverage-data" flatten="true">
            <fileset dir="${user.home}/Library/Developer/Xcode/DerivedData" includes="${gcda.list}"/>
        </copy>

    </target>

    <target name="--coverage.report">
        <property name="coverage.reports.dir" value="${reports.dir}/coverage"/>
        <mkdir dir="${coverage.reports.dir}"/>

        <echo file="${temp.dir}/geninfo.sh">
            #!/bin/sh
            geninfo "${temp.dir}/coverage-data/"*.gcda --no-recursion -o "${temp.dir}/coverage-temp.info"
            #Remove symbols we're not interested in.
            lcov -r "${temp.dir}/coverage-temp.info" _string.h > "${temp.dir}/coverage.info"
        </echo>
        <chmod perm="+x" file="${temp.dir}/geninfo.sh"/>
        <exec executable="${temp.dir}/geninfo.sh" failonerror="true" failifexecutionfails="true" outputproperty="geninfo.out"
              errorproperty="geninfo.error"/>

        <echo file="${temp.dir}/genhtml.sh">
            #!/bin/sh
            genhtml -p "${basedir}" --no-function-coverage --no-branch-coverage -o "${coverage.reports.dir}" \
            --prefix "${basedir}" "${temp.dir}/coverage.info"
        </echo>
        <chmod perm="+x" file="${temp.dir}/genhtml.sh"/>
        <exec executable="${temp.dir}/genhtml.sh" failonerror="true" failifexecutionfails="true" outputproperty="genhtml.out"
              errorproperty="genhtml.error"/>

        <exec executable="lcov">
            <arg line="--summary ./build/temp/coverage.info"/>
        </exec>
    </target>

    <target name="--api.report">
        <mkdir dir="${reports.dir}/api"/>
        <mkdir dir="${user.home}/Library/Developer/Shared"/>
        <mkdir dir="${user.home}/Library/Developer/Shared/Documentation"/>
        <mkdir dir="${user.home}/Library/Developer/Shared/Documentation/Docsets"/>
        <!-- In case it's turned up somehow, despite cleaning up. -->
        <delete file="${basedir}/docset-installed.txt"/>

        <pathconvert pathsep=" " property="doc.files.list" refid="headers">
            <map from='${source.main.dir}' to='"${source.main.dir}"'/>
        </pathconvert>
        <!--<echo message="Documenting: ${doc.files.list}"/>-->

        <exec executable="appledoc" outputproperty="appledoc.out" errorproperty="appledoc.error">
            <arg line="--project-name=${module.name}"/>
            <arg line="--project-company=${module.company}"/>
            <arg line="--company-id=${module.company}"/>
            <arg line="-h --keep-undocumented-objects --keep-undocumented-members"/>
            <arg line="${doc.files.list}"/>
        </exec>

        <loadfile srcfile="${basedir}/docset-installed.txt" property="docset.installed"/>
        <fail unless="docset.installed" message="Error creating documentation"/>
        <!-- Don't leave it lying around -->
        <delete file="${basedir}/docset-installed.txt"/>

        <property name="docs.dir" value="${user.home}/Library/Developer/Shared/Documentation/Docsets"/>
        <copy todir="${reports.dir}/api">
            <fileset dir="${docs.dir}/${module.company}.${module.name}.docset/Contents/Resources/Documents"/>
        </copy>
    </target>

    <target name="--publish.site">
        <echo file="${temp.dir}/publish-site.sh">
            <![CDATA[
            #!/bin/bash
            set -e # fail script if any commands fail

            cd ${basedir}
            git remote add origin ${github.uri} || true # allow `remote add` to fail without failing script
            git remote set-url origin ${github.uri}
            git checkout gh-pages
            git branch --set-upstream-to=origin/gh-pages gh-pages
            git pull
            mkdir -p ./build-status
            cp -fr ${reports.dir}/build-status/build-status.png ./build-status/
            git add --all --ignore-removal ./build-status
            rm -fr ./coverage
            mkdir -p ${reports.dir}/coverage
            cp -fr ${reports.dir}/coverage/ ./coverage
            git add --all --ignore-removal ./coverage
            rm -fr ./api
            cp -fr ${reports.dir}/api ./api
            git add --all --ignore-removal api
            rm -fr ./test-results
            cp -fr ${reports.dir}/test-results/ ./test-results
            git add --all --ignore-removal ./test-results

            git commit -a -m "publish reports to gh-pages"
            git push -u origin gh-pages
            git checkout master

            ]]>
        </echo>
        <chmod perm="+x" file="${temp.dir}/publish-site.sh"/>
        <exec executable="${temp.dir}/publish-site.sh" failonerror="true" failifexecutionfails="true" />
    </target>


</project>
